server {
    listen 80;
    server_name vulndrake;

    # redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name vulndrake;

    # SSL/TLS certificate configuration
    ssl_certificate /etc/nginx/ssl/vulndrake.crt;
    ssl_certificate_key /etc/nginx/ssl/vulndrake.key;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # enable only TLSv1.2 and TLSv1.3
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";

    # security headers
    add_header X-Frame-Options "DENY"; # clickjacking
    add_header X-Content-Type-Options "nosniff"; # MIME type sniffing
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';"; # CSP
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; # force HTTPS
    add_header X-XSS-Protection "1; mode=block"; # XSS filtering and block detected attacks
    add_header Referrer-Policy "no-referrer-when-downgrade"; # control the amount of referrer information sent
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()"; # restrict use of browser features
    add_header Access-Control-Allow-Origin "*"; # CORS

    server_tokens off;

    root /var/www/vulndrake/app;
    index index.php;
    
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PHP_VALUE "open_basedir=/var/www/vulndrake/app:/tmp";
        fastcgi_pass vulndrake-web:9000;
        fastcgi_index index.php;
        fastcgi_read_timeout 1800;
    }

    location /data/reports/ {
        alias /var/www/vulndrake/app/data/reports/;
        autoindex off;
        try_files $uri =404;
    }

    # disable unwanted HTTP methods
    if ($request_method !~ ^(GET|POST|HEAD)$ ) {
        return 444;
    }

    # buffer overflow protection
    client_body_buffer_size 1K;
    client_header_buffer_size 1k;
    client_max_body_size 1k;
    large_client_header_buffers 2 1k;
}